{"version":3,"sources":["actionTypes.js","reducers/categoryReducer.js","reducers/companyReducer.js","reducers/rootReducer.js","actions.js","Home.js","CategoryCompanies.js","CompanyInfo.js","NavCase.js","App.js","reportWebVitals.js","index.js"],"names":["GETCATEGORIES","GETALLCOMPANIES","GETCOMPANIES","GETCOMPANY","INITIAL_STATE","categories","companies","rootReducer","combineReducers","action","type","info","DBAPI","Home","categoryArr","dispatch","useDispatch","history","useHistory","useEffect","a","axios","get","resp","data","useSelector","store","handleClick","e","includes","target","id","push","map","category","onClick","comp_type","className","Card","inverse","CardImg","height","width","src","alt","CardImgOverlay","CardTitle","CategoryCompanies","useParams","getCompanies","isNaN","length","company","top","logo","CardBody","tag","comp_name","CardText","Button","CompanyInfo","getCompany","Jumbotron","htmlFor","street_address","phone","email","color","NavCase","useState","isOpen","setIsOpen","Navbar","expand","NavbarToggler","Collapse","navbar","NavLink","href","icon","faHome","Nav","NavbarText","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e2b5ce9.chunk.js","sourcesContent":["export const GETCATEGORIES = \"GETCATEGORIES\"; //get all company categories\r\nexport const GETALLCOMPANIES = \"GETALLCOMPANIES\"; //get all companies\r\nexport const GETCOMPANIES = \"GETCOMPANIES\"; //get companies, id, and description in a specified category\r\nexport const GETCOMPANY = \"GETCOMPANY\"; //get all info for a single company","import {GETCATEGORIES} from '../actionTypes';\r\n\r\nconst INITIAL_STATE = {categories: []};\r\n\r\nexport default function categoryReducer(state = INITIAL_STATE, action){\r\n    switch(action.type){\r\n        case GETCATEGORIES:\r\n            return {categories: [...action.categories]};\r\n        default:\r\n            return INITIAL_STATE;\r\n    };\r\n};","import {GETCOMPANIES, GETALLCOMPANIES, GETCOMPANY} from '../actionTypes';\r\n\r\nconst INITIAL_STATE = {companies: []};\r\n\r\nexport default function companyReducer(state = INITIAL_STATE, action){\r\n    switch(action.type){\r\n        case GETCOMPANIES:\r\n            return {companies: [...action.companies]};\r\n        case GETALLCOMPANIES:\r\n            return {companies: [...action.companies]};\r\n        case GETCOMPANY:\r\n            return {companies: [...action.info]};\r\n        default:\r\n            return INITIAL_STATE;\r\n    };\r\n};","import categoryReducer from './categoryReducer';\r\nimport companyReducer from './companyReducer';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst rootReducer = combineReducers({categories: categoryReducer, companies: companyReducer});\r\n\r\nexport default rootReducer;","import {GETCATEGORIES, GETCOMPANIES, GETALLCOMPANIES, GETCOMPANY} from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nconst DBAPI = 'http://localhost:5000';\r\n\r\nexport function getCategories(){\r\n    return async function(dispatch){\r\n        let resp = await axios.get(`${DBAPI}/`);\r\n\r\n        return dispatch(allCategories(resp.data));\r\n    };\r\n};\r\n\r\nfunction allCategories(categories){\r\n    return {type: GETCATEGORIES, categories: categories}\r\n};\r\n\r\nexport function getCompanies(category){\r\n    return async function(dispatch){\r\n        let resp = await axios.get(`${DBAPI}/companies/${category}`);\r\n\r\n        return dispatch(categoryCompanies(resp.data));\r\n    };\r\n};\r\n\r\nfunction categoryCompanies(companies){\r\n    return {type: GETCOMPANIES, companies: companies}\r\n};\r\n\r\nexport function getAllCompanies(){\r\n    return async function(dispatch){\r\n        let resp = await axios.get(`${DBAPI}/companies`);\r\n\r\n        return dispatch(allCompanies(resp.data));\r\n    };\r\n};\r\n\r\nfunction allCompanies(companies){\r\n    return {type: GETALLCOMPANIES, companies: companies}\r\n};\r\n\r\nexport function getCompany(id){\r\n    return async function(dispatch){\r\n        let resp = await axios.get(`${DBAPI}/company/${id}`);\r\n\r\n        return dispatch(company(resp.data));\r\n    };\r\n};\r\n\r\nfunction company(info){\r\n    return {type: GETCOMPANY, info: info}\r\n};","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getCategories } from './actions';\r\nimport { Card, CardTitle, CardImg, CardImgOverlay } from 'reactstrap';\r\nimport './Home.css';\r\n\r\nconst Home = () =>{\r\n    // array of all categories use with handleClick function to ensure clicks only work on divs containing cards\r\n    const categoryArr = ['realty', 'construction', 'restaurant', 'crafts']\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    // send api call to get all available categories from the database\r\n    useEffect(() =>{\r\n        dispatch(getCategories());\r\n    }, [dispatch]);\r\n\r\n    // retrieves categories from the redux store to use for the cards\r\n    const {categories} = useSelector(store => store.categories);\r\n\r\n    // if div id corresponds to a category in the database the user is taken to a page containing\r\n    // names of all the companies in that category\r\n    const  handleClick = (e) =>{\r\n        if(categoryArr.includes(e.target.id)){\r\n            history.push(`/companies/${e.target.id}`);\r\n        };\r\n    };\r\n\r\n    return(\r\n        <>\r\n        <div>\r\n            {/* if there are categories use array.map function to set up cards for each category */}\r\n            {categories ? categories.map(category =>(\r\n                <div onClick={handleClick} id={category.comp_type} key={category.comp_type} className=\"home-card-div col-xs-10 col-md-5\">\r\n                    <Card inverse className=\"home-card\">\r\n                      <CardImg height=\"100%\" width=\"100%\" src={`/${category.comp_type}.jpg`} alt=\"Card image cap\" />\r\n                      <CardImgOverlay className=\"home-img-overlay\">\r\n                        <CardTitle id={category.comp_type} className={`home-title-${category.comp_type} home-card-title`}>{category.comp_type}</CardTitle>\r\n                      </CardImgOverlay>\r\n                    </Card>\r\n                </div>\r\n            ))\r\n            : null}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { getCompanies } from './actions';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, Button } from 'reactstrap';\r\nimport './CategoryCompanies.css';\r\n\r\nconst CategoryCompanies = () =>{\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const {category} = useParams();\r\n\r\n    // send api call to get companies associated with the category of the page\r\n    useEffect(() => {\r\n        dispatch(getCompanies(category));\r\n    }, [dispatch, category]);\r\n\r\n    // retrieve companies from the redux store\r\n    const {companies} = useSelector(store => store.companies);\r\n    \r\n    // if id of clicked element is a number and it is greater than 0, \r\n    // send user to the page associated with that company\r\n    const handleClick = (e) =>{\r\n        if(e.target.id > 0 && (!isNaN(e.target.id))){\r\n            history.push(`/company/${e.target.id}`);\r\n        };\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {/* if there are companies use array.map function to set up cards for each */}\r\n        {companies.length > 0 ? companies.map(company =>(\r\n            <div key={company.id} className=\"cat-card-div col-sm-10 col-md-5 col-xl-3\">\r\n                <Card>\r\n                  <CardImg className=\"cat-card-img\" top src={`${company.logo}`} alt=\"Card image cap\" />\r\n                  <CardBody className=\"cat-card-body\">\r\n                    <CardTitle tag=\"h3\">{company.comp_name}</CardTitle>\r\n                    <CardText className=\"cat-comp-info-text\">{company.info}</CardText>\r\n                    <Button onClick={handleClick} id={company.id}>Learn More</Button>\r\n                  </CardBody>\r\n                </Card>\r\n            </div>\r\n        ))\r\n        : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CategoryCompanies;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { getCompany } from './actions';\r\nimport { Jumbotron, Button } from 'reactstrap';\r\nimport './CompanyInfo.css'; \r\n\r\nconst CompanyInfo = () =>{\r\n\r\n    const categoryArr = ['construction', 'crafts', 'restaurant', 'realty'];\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const {id} = useParams();\r\n\r\n    // send api call to get info on company related to id from useParams\r\n    useEffect(()=>{\r\n        dispatch(getCompany(id));\r\n    }, [dispatch, id]);\r\n\r\n    // retrieve info on associated company\r\n    const {companies} = useSelector(store => store.companies);\r\n\r\n    const handleClick = (e) =>{\r\n        if(categoryArr.includes(e.target.id)){\r\n            history.push(`/companies/${e.target.id}`)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div className=\"comp-info-jumbo-div\">\r\n            {companies.length === 1 ? \r\n                    <Jumbotron className=\"comp-info-jumbo col-xs-10 col-md-8\">\r\n                        <div className=\"comp-info-img-div\">\r\n                            <img className=\"comp-info-img\" src={companies[0].logo} alt={companies[0].comp_name}></img>\r\n                        </div>\r\n                        <h1 className=\"display-3 comp-info-title\">{companies[0].comp_name}</h1>\r\n                        <p className=\"lead comp-info-info\">{companies[0].info}</p>\r\n                        <hr className=\"my-2\" />\r\n                        <div className=\"comp-info-div col-xs-10 col-md-10\">\r\n                            <label htmlFor=\"address\" className=\"comp-info-label\">Address:</label>\r\n                            <p id=\"address\" className=\"comp-info-p col-xs-10 col-md-3\">{companies[0].street_address}</p>\r\n                            <label htmlFor=\"phone\" className=\"comp-info-label\">Phone:</label>\r\n                            <p id=\"phone\" className=\"comp-info-p col-xs-10 col-md-3\">{companies[0].phone}</p>\r\n                            <label htmlFor=\"email\" className=\"comp-info-label\">Email:</label>\r\n                            <p id=\"email\" className=\"comp-info-p col-xs-10 col-md-3\">{companies[0].email}</p>\r\n                        </div>\r\n                        <div className=\"comp-info-jumbo-btn-div\">\r\n                            <Button onClick={handleClick} className=\"comp-info-jumbo-btn\" id={companies[0].comp_type} color=\"primary\">Back</Button>\r\n                        </div>\r\n                    </Jumbotron>\r\n        : null\r\n        }\r\n        </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CompanyInfo;","import React, { useState } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, Nav, NavLink, NavbarText} from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\nimport './NavCase.css';\r\n\r\nconst NavCase = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n  \r\n    return (\r\n      <div className=\"navcase-div\">\r\n        <Navbar className=\"navcase-navbar\" expand=\"md\">\r\n          <NavbarToggler onClick={toggle} />\r\n          <Collapse className=\"navcase-collapse\" isOpen={isOpen} navbar>\r\n            <NavLink className=\"nav-navlink\" href=\"/\"><FontAwesomeIcon icon={faHome} className=\"fa-3x nav-icon\"/></NavLink>\r\n            <Nav className=\"nav mx-auto\" navbar>\r\n                <img className=\"nav-cart-png\" src=\"/shopping-cart-20377.png\" alt=\"cart\"></img>\r\n                <NavbarText className=\"navcase-title h1\">Shop Indiana County</NavbarText>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default NavCase;","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport Home from './Home';\nimport CategoryCompanies from './CategoryCompanies';\nimport CompanyInfo from './CompanyInfo';\nimport NavCase from './NavCase';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavCase/>\n      <Switch>\n        <Route exact path='/'>\n          <Home/>\n        </Route>\n        <Route exact path='/companies/:category'>\n          <CategoryCompanies/>\n        </Route>\n        <Route exact path='/company/:id'>\n          <CompanyInfo/>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport rootReducer from './reducers/rootReducer';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}